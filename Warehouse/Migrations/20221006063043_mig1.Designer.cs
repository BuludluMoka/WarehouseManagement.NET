// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warehouse.Data.Models;

#nullable disable

namespace Warehouse.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    [Migration("20221006063043_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        });
                });

            modelBuilder.Entity("Warehouse.Data.Models.Anbar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Anbars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5646),
                            Name = "Yasamal",
                            Phone = "55623415",
                            Place = "Baki,Yasamal,Dalan4"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5657),
                            Name = "Seki",
                            Phone = "55623415",
                            Place = "Seki,Xan Sarayi,Dalan4"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5658),
                            Name = "Qebele",
                            Phone = "55623415",
                            Place = "Qebele,Dalan4"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5659),
                            Name = "Nerimanov",
                            Phone = "55623415",
                            Place = "Baki,Nerimanov,Dalan4"
                        });
                });

            modelBuilder.Entity("Warehouse.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5683),
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5685),
                            Name = "Medicine"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5686),
                            Name = "Laptops",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5687),
                            Name = "Mouse & Keyboards",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5690),
                            Name = "Computer Components",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5691),
                            Name = "Accessories",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5693),
                            Name = "Electronic Medical Equipment",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5694),
                            Name = "Diagnostic Medical Equipment",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5695),
                            Name = "Durable Medical Equipment",
                            ParentId = 2
                        });
                });

            modelBuilder.Entity("Warehouse.Data.Models.Common.Authentication.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            ConcurrencyStamp = "064bb7b7-6f70-4918-8cb3-272dac7978c2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Warehouse.Data.Models.Common.Authentication.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnbarId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AnbarId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            Address = "WarehouseHome",
                            AnbarId = 1,
                            Email = "buludlumoka@gmail.com",
                            NormalizedEmail = "BULUDLUMOKA@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELiIObJNd5DkI9xGNHgFQ0Tl4efdr8t9eXk8gNvduArF5TXqFbuzF2GMxB23TrwqZw==",
                            PhoneNumber = "055557623415",
                            SecurityStamp = "",
                            Status = true,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Warehouse.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("buyPrice")
                        .HasColumnType("real");

                    b.Property<float>("sellPrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5829),
                            Name = "Xiaomi RedmiBook Pro 15 Laptop 15.6 Inch 3.2K 90Hz Super Retina Screen AMD R5 5600H 16GB 512GB AMD Radeon Graphics Card Notebook",
                            buyPrice = 1554.64f,
                            sellPrice = 1660.55f
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5831),
                            Name = "Dere V9 MAX Laptop 15.6',Intel Core i7-1165G7, 16GB RAM + 1TB SSD, 2.5K IPS Screen, Computer Office Windows 11 Notebook",
                            buyPrice = 1111.34f,
                            sellPrice = 1300.56f
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5832),
                            Name = "AMD RX 580 8G Computer Graphics Card,RX580 8G For GDDR5 GPU mining Video Card",
                            buyPrice = 185.5f,
                            sellPrice = 200f
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5833),
                            Name = "AMD Ryzen 9 5900X R9 5900X 3.7 GHz Twelve-Core 24-Thread CPU Processor",
                            buyPrice = 777.6f,
                            sellPrice = 956.78f
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 6,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5834),
                            Name = "Domiso Mutil-use Laptop Sleeve With Handle For 14' 15.6' 17' Inch Notebook Computer Bag",
                            buyPrice = 61f,
                            sellPrice = 74.6f
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5835),
                            Name = "Fan For Computer PC Laptop Notebook",
                            buyPrice = 3f,
                            sellPrice = 3.6f
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5836),
                            Name = "Heart Rate Monitors",
                            buyPrice = 800.6f,
                            sellPrice = 996.78f
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 7,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5838),
                            Name = "Blood Pressure Monitors",
                            buyPrice = 14000.6f,
                            sellPrice = 15560.78f
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 7,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5839),
                            Name = "Ultrasound",
                            buyPrice = 23000.6f,
                            sellPrice = 35000.78f
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 8,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5840),
                            Name = "MRI Scans",
                            buyPrice = 12000.6f,
                            sellPrice = 18000.78f
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 8,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5841),
                            Name = "X-Rays",
                            buyPrice = 4600.6f,
                            sellPrice = 5000.78f
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 9,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5842),
                            Name = "Hospital beds",
                            buyPrice = 700.6f,
                            sellPrice = 956.78f
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 9,
                            CreatedDate = new DateTime(2022, 10, 6, 10, 30, 43, 661, DateTimeKind.Local).AddTicks(5843),
                            Name = "Ventilators",
                            buyPrice = 80.6f,
                            sellPrice = 95.78f
                        });
                });

            modelBuilder.Entity("Warehouse.Data.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("receiver_id")
                        .HasColumnType("int");

                    b.Property<int?>("sender_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("receiver_id");

                    b.HasIndex("sender_id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Warehouse.Data.Models.Common.Authentication.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Data.Models.Common.Authentication.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Data.Models.Category", b =>
                {
                    b.HasOne("Warehouse.Data.Models.Category", "Parent")
                        .WithMany("categoryChildren")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Warehouse.Data.Models.Common.Authentication.AppUser", b =>
                {
                    b.HasOne("Warehouse.Data.Models.Anbar", "Anbar")
                        .WithMany("Users")
                        .HasForeignKey("AnbarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anbar");
                });

            modelBuilder.Entity("Warehouse.Data.Models.Product", b =>
                {
                    b.HasOne("Warehouse.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Warehouse.Data.Models.Transaction", b =>
                {
                    b.HasOne("Warehouse.Data.Models.Product", "Product")
                        .WithMany("Transactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Data.Models.Common.Authentication.AppUser", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.HasOne("Warehouse.Data.Models.Anbar", "Receiver")
                        .WithMany("Receiver")
                        .HasForeignKey("receiver_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Data.Models.Anbar", "Sender")
                        .WithMany("Sender")
                        .HasForeignKey("sender_id");

                    b.Navigation("Product");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Warehouse.Data.Models.Anbar", b =>
                {
                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Warehouse.Data.Models.Category", b =>
                {
                    b.Navigation("categoryChildren");
                });

            modelBuilder.Entity("Warehouse.Data.Models.Common.Authentication.AppUser", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Warehouse.Data.Models.Product", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
